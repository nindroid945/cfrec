{"version":3,"file":"javascript.min.js","sources":["../node_modules/js-cookie/dist/js.cookie.mjs","../src/cookies.ts","../src/org.ts","../src/user.ts","../src/api.ts","../src/org_helper.ts","../src/access_helper.ts","../src/helpers.ts","../src/client.ts"],"sourcesContent":["/*! js-cookie v3.0.5 | MIT */\n/* eslint-disable no-var */\nfunction assign (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      target[key] = source[key];\n    }\n  }\n  return target\n}\n/* eslint-enable no-var */\n\n/* eslint-disable no-var */\nvar defaultConverter = {\n  read: function (value) {\n    if (value[0] === '\"') {\n      value = value.slice(1, -1);\n    }\n    return value.replace(/(%[\\dA-F]{2})+/gi, decodeURIComponent)\n  },\n  write: function (value) {\n    return encodeURIComponent(value).replace(\n      /%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,\n      decodeURIComponent\n    )\n  }\n};\n/* eslint-enable no-var */\n\n/* eslint-disable no-var */\n\nfunction init (converter, defaultAttributes) {\n  function set (name, value, attributes) {\n    if (typeof document === 'undefined') {\n      return\n    }\n\n    attributes = assign({}, defaultAttributes, attributes);\n\n    if (typeof attributes.expires === 'number') {\n      attributes.expires = new Date(Date.now() + attributes.expires * 864e5);\n    }\n    if (attributes.expires) {\n      attributes.expires = attributes.expires.toUTCString();\n    }\n\n    name = encodeURIComponent(name)\n      .replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent)\n      .replace(/[()]/g, escape);\n\n    var stringifiedAttributes = '';\n    for (var attributeName in attributes) {\n      if (!attributes[attributeName]) {\n        continue\n      }\n\n      stringifiedAttributes += '; ' + attributeName;\n\n      if (attributes[attributeName] === true) {\n        continue\n      }\n\n      // Considers RFC 6265 section 5.2:\n      // ...\n      // 3.  If the remaining unparsed-attributes contains a %x3B (\";\")\n      //     character:\n      // Consume the characters of the unparsed-attributes up to,\n      // not including, the first %x3B (\";\") character.\n      // ...\n      stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];\n    }\n\n    return (document.cookie =\n      name + '=' + converter.write(value, name) + stringifiedAttributes)\n  }\n\n  function get (name) {\n    if (typeof document === 'undefined' || (arguments.length && !name)) {\n      return\n    }\n\n    // To prevent the for loop in the first place assign an empty array\n    // in case there are no cookies at all.\n    var cookies = document.cookie ? document.cookie.split('; ') : [];\n    var jar = {};\n    for (var i = 0; i < cookies.length; i++) {\n      var parts = cookies[i].split('=');\n      var value = parts.slice(1).join('=');\n\n      try {\n        var found = decodeURIComponent(parts[0]);\n        jar[found] = converter.read(value, found);\n\n        if (name === found) {\n          break\n        }\n      } catch (e) {}\n    }\n\n    return name ? jar[name] : jar\n  }\n\n  return Object.create(\n    {\n      set,\n      get,\n      remove: function (name, attributes) {\n        set(\n          name,\n          '',\n          assign({}, attributes, {\n            expires: -1\n          })\n        );\n      },\n      withAttributes: function (attributes) {\n        return init(this.converter, assign({}, this.attributes, attributes))\n      },\n      withConverter: function (converter) {\n        return init(assign({}, this.converter, converter), this.attributes)\n      }\n    },\n    {\n      attributes: { value: Object.freeze(defaultAttributes) },\n      converter: { value: Object.freeze(converter) }\n    }\n  )\n}\n\nvar api = init(defaultConverter, { path: '/' });\n/* eslint-enable no-var */\n\nexport { api as default };\n","export const ACTIVE_ORG_ID_COOKIE_NAME = \"active_org_id\"\n","import Cookies from \"js-cookie\"\nimport { ACTIVE_ORG_ID_COOKIE_NAME } from \"./cookies\"\n\nexport type OrgMemberInfo = {\n    orgId: string\n    orgName: string\n    orgMetadata: { [key: string]: any }\n    urlSafeOrgName: string\n    orgRoleStructure: OrgRoleStructure\n    userAssignedRole: string\n    userInheritedRolesPlusCurrentRole: string[]\n    userPermissions: string[]\n    userAssignedAdditionalRoles: string[]\n}\nexport type OrgIdToOrgMemberInfo = {\n    [orgId: string]: OrgMemberInfo\n}\n\nexport enum OrgRoleStructure {\n    SingleRole = \"single_role_in_hierarchy\",\n    MultiRole = \"multi_role\",\n}\n\nexport const setActiveOrgId = (orgId: string) => {\n    Cookies.set(ACTIVE_ORG_ID_COOKIE_NAME, orgId, {\n        sameSite: \"lax\",\n        secure: true,\n    })\n}\n\nexport const getActiveOrgId = (): string | undefined => {\n    return Cookies.get(ACTIVE_ORG_ID_COOKIE_NAME)\n}\n","import { OrgIdToOrgMemberInfo, OrgRoleStructure } from \"./org\"\n\nexport type UserProperties = { [key: string]: unknown }\n\nexport interface UserFields {\n    userId: string\n    email: string\n    createdAt: number\n    firstName?: string\n    lastName?: string\n    username?: string\n    properties?: UserProperties\n    pictureUrl?: string\n    hasPassword?: boolean\n    hasMfaEnabled?: boolean\n    canCreateOrgs?: boolean\n    legacyUserId?: string\n    impersonatorUserId?: string\n}\n\nexport class UserClass {\n    public userId: string\n    public orgIdToUserOrgInfo?: OrgIdToOrgMemberInfoClass\n\n    // Metadata about the user\n    public email: string\n    public createdAt: number\n    public firstName?: string\n    public lastName?: string\n    public username?: string\n    public properties?: UserProperties\n    public pictureUrl?: string\n    public hasPassword?: boolean\n    public hasMfaEnabled?: boolean\n    public canCreateOrgs?: boolean\n\n    // If you used our migration APIs to migrate this user from a different system,\n    // this is their original ID from that system.\n    public legacyUserId?: string\n    public impersonatorUserId?: string\n\n    constructor(userFields: UserFields, orgIdToUserOrgInfo?: OrgIdToOrgMemberInfoClass) {\n        this.userId = userFields.userId\n        this.orgIdToUserOrgInfo = orgIdToUserOrgInfo\n\n        this.email = userFields.email\n        this.firstName = userFields.firstName\n        this.lastName = userFields.lastName\n        this.username = userFields.username\n        this.createdAt = userFields.createdAt\n        this.pictureUrl = userFields.pictureUrl\n        this.hasPassword = userFields.hasPassword\n        this.hasMfaEnabled = userFields.hasMfaEnabled\n        this.canCreateOrgs = userFields.canCreateOrgs\n\n        this.legacyUserId = userFields.legacyUserId\n        this.impersonatorUserId = userFields.impersonatorUserId\n        this.properties = userFields.properties\n    }\n\n    public getOrg(orgId: string): OrgMemberInfoClass | undefined {\n        if (!this.orgIdToUserOrgInfo) {\n            return undefined\n        }\n\n        return this.orgIdToUserOrgInfo[orgId]\n    }\n\n    public getOrgByName(orgName: string): OrgMemberInfoClass | undefined {\n        if (!this.orgIdToUserOrgInfo) {\n            return undefined\n        }\n\n        const urlSafeOrgName = orgName.toLowerCase().replace(/ /g, \"-\")\n        for (const orgId in this.orgIdToUserOrgInfo) {\n            const orgMemberInfo = this.orgIdToUserOrgInfo[orgId]\n            if (orgMemberInfo?.urlSafeOrgName === urlSafeOrgName) {\n                return orgMemberInfo\n            }\n        }\n\n        return undefined\n    }\n\n    public getUserProperty(key: string): unknown | undefined {\n        if (!this.properties) {\n            return undefined\n        }\n\n        return this.properties[key]\n    }\n\n    public getOrgs(): OrgMemberInfoClass[] {\n        if (!this.orgIdToUserOrgInfo) {\n            return []\n        }\n\n        return Object.values(this.orgIdToUserOrgInfo)\n    }\n\n    public isImpersonating(): boolean {\n        return !!this.impersonatorUserId\n    }\n\n    public isRole(orgId: string, role: string): boolean {\n        const orgMemberInfo = this.getOrg(orgId)\n        if (!orgMemberInfo) {\n            return false\n        }\n\n        return orgMemberInfo.isRole(role)\n    }\n\n    public isAtLeastRole(orgId: string, role: string): boolean {\n        const orgMemberInfo = this.getOrg(orgId)\n        if (!orgMemberInfo) {\n            return false\n        }\n\n        return orgMemberInfo.isAtLeastRole(role)\n    }\n\n    public hasPermission(orgId: string, permission: string): boolean {\n        const orgMemberInfo = this.getOrg(orgId)\n        if (!orgMemberInfo) {\n            return false\n        }\n\n        return orgMemberInfo.hasPermission(permission)\n    }\n\n    public hasAllPermissions(orgId: string, permissions: string[]): boolean {\n        const orgMemberInfo = this.getOrg(orgId)\n        if (!orgMemberInfo) {\n            return false\n        }\n\n        return orgMemberInfo.hasAllPermissions(permissions)\n    }\n\n    public static fromJSON(json: string): UserClass {\n        const obj = JSON.parse(json)\n        const orgIdToUserOrgInfo: OrgIdToOrgMemberInfoClass = {}\n        for (const orgId in obj.orgIdToUserOrgInfo) {\n            orgIdToUserOrgInfo[orgId] = OrgMemberInfoClass.fromJSON(JSON.stringify(obj.orgIdToUserOrgInfo[orgId]))\n        }\n        try {\n            return new UserClass(\n                {\n                    userId: obj.userId,\n                    email: obj.email,\n                    createdAt: obj.createdAt,\n                    firstName: obj.firstName,\n                    lastName: obj.lastName,\n                    username: obj.username,\n                    legacyUserId: obj.legacyUserId,\n                    impersonatorUserId: obj.impersonatorUserId,\n                    properties: obj.properties,\n                    pictureUrl: obj.pictureUrl,\n                    hasPassword: obj.hasPassword,\n                    hasMfaEnabled: obj.hasMfaEnabled,\n                    canCreateOrgs: obj.canCreateOrgs,\n                },\n                orgIdToUserOrgInfo\n            )\n        } catch (e) {\n            console.error(\"Unable to parse User. Make sure the JSON string is a stringified `UserClass` type.\", e)\n            throw e\n        }\n    }\n}\n\nexport interface OrgIdToOrgMemberInfoClass {\n    [orgId: string]: OrgMemberInfoClass\n}\n\nexport class OrgMemberInfoClass {\n    public orgId: string\n    public orgName: string\n    public orgMetadata: { [key: string]: any }\n    public urlSafeOrgName: string\n    public orgRoleStructure: OrgRoleStructure\n\n    public userAssignedRole: string\n    public userInheritedRolesPlusCurrentRole: string[]\n    public userPermissions: string[]\n    public userAssignedAdditionalRoles: string[]\n\n    constructor(\n        orgId: string,\n        orgName: string,\n        orgMetadata: { [key: string]: any },\n        urlSafeOrgName: string,\n        userAssignedRole: string,\n        userInheritedRolesPlusCurrentRole: string[],\n        userPermissions: string[],\n        orgRoleStructure?: OrgRoleStructure,\n        userAssignedAdditionalRoles?: string[]\n    ) {\n        this.orgId = orgId\n        this.orgName = orgName\n        this.orgMetadata = orgMetadata\n        this.urlSafeOrgName = urlSafeOrgName\n        this.orgRoleStructure = orgRoleStructure ?? OrgRoleStructure.SingleRole\n\n        this.userAssignedRole = userAssignedRole\n        this.userInheritedRolesPlusCurrentRole = userInheritedRolesPlusCurrentRole\n        this.userPermissions = userPermissions\n        this.userAssignedAdditionalRoles = userAssignedAdditionalRoles ?? []\n    }\n\n    // validation methods\n    public isRole(role: string): boolean {\n        if (this.orgRoleStructure === OrgRoleStructure.MultiRole) {\n            return this.userAssignedRole === role || this.userAssignedAdditionalRoles.includes(role)\n        } else {\n            return this.userAssignedRole === role\n        }\n    }\n\n    public isAtLeastRole(role: string): boolean {\n        if (this.orgRoleStructure === OrgRoleStructure.MultiRole) {\n            return this.userAssignedRole === role || this.userAssignedAdditionalRoles.includes(role)\n        } else {\n            return this.userInheritedRolesPlusCurrentRole.includes(role)\n        }\n    }\n\n    public hasPermission(permission: string): boolean {\n        return this.userPermissions.includes(permission)\n    }\n\n    public hasAllPermissions(permissions: string[]): boolean {\n        return permissions.every((permission) => this.hasPermission(permission))\n    }\n\n    public static fromJSON(json: string): OrgMemberInfoClass {\n        const obj = JSON.parse(json)\n        try {\n            return new OrgMemberInfoClass(\n                obj.orgId,\n                obj.orgName,\n                obj.orgMetadata,\n                obj.urlSafeOrgName,\n                obj.userAssignedRole,\n                obj.userInheritedRolesPlusCurrentRole,\n                obj.userPermissions,\n                obj.orgRoleStructure,\n                obj.userAssignedAdditionalRoles\n            )\n        } catch (e) {\n            console.error(\n                \"Unable to parse UserOrgInfo. Make sure the JSON string is a stringified `UserOrgInfo` type.\",\n                e\n            )\n            throw e\n        }\n    }\n}\n\nexport function convertOrgIdToOrgMemberInfo(\n    orgIdToOrgMemberInfo: OrgIdToOrgMemberInfo | undefined\n): OrgIdToOrgMemberInfoClass | undefined {\n    if (orgIdToOrgMemberInfo === undefined) {\n        return undefined\n    }\n    const orgIdToUserOrgInfo: OrgIdToOrgMemberInfoClass = {}\n    for (const orgMemberInfo of Object.values(orgIdToOrgMemberInfo)) {\n        orgIdToUserOrgInfo[orgMemberInfo.orgId] = new OrgMemberInfoClass(\n            orgMemberInfo.orgId,\n            orgMemberInfo.orgName,\n            orgMemberInfo.orgMetadata,\n            orgMemberInfo.urlSafeOrgName,\n            orgMemberInfo.userAssignedRole,\n            orgMemberInfo.userInheritedRolesPlusCurrentRole,\n            orgMemberInfo.userPermissions,\n            orgMemberInfo.orgRoleStructure,\n            orgMemberInfo.userAssignedAdditionalRoles\n        )\n    }\n    return orgIdToUserOrgInfo\n}\n","import { AccessHelper, getAccessHelper } from \"./access_helper\"\nimport { OrgIdToOrgMemberInfo } from \"./org\"\nimport { getOrgHelper, OrgHelper } from \"./org_helper\"\nimport { convertOrgIdToOrgMemberInfo, UserClass } from \"./user\"\n\nexport type User = {\n    userId: string\n\n    email: string\n    emailConfirmed: boolean\n\n    hasPassword: boolean\n\n    username?: string\n    firstName?: string\n    lastName?: string\n    pictureUrl?: string\n\n    locked: boolean\n    enabled: boolean\n    mfaEnabled: boolean\n    canCreateOrgs: boolean\n\n    createdAt: number\n    lastActiveAt: number\n\n    legacyUserId?: string\n    properties?: { [key: string]: unknown }\n}\n\nexport type AuthenticationInfo = {\n    accessToken: string\n    expiresAtSeconds: number\n    orgHelper: OrgHelper\n    accessHelper: AccessHelper\n\n    /**\n     * You should prefer orgHelper to orgIdToOrgMemberInfo.\n     * orgHelper provides useful abstractions over this mapping\n     */\n    orgIdToOrgMemberInfo?: OrgIdToOrgMemberInfo\n    user: User\n    userClass: UserClass\n\n    // If someone on your team is impersonating another user, this will be set to the employee's ID\n    // By default, user impersonation is turned off and this will be undefined\n    impersonatorUserId?: string\n}\n\nexport type LogoutResponse = {\n    redirect_to: string\n}\n\nexport function fetchAuthenticationInfo(authUrl: string): Promise<AuthenticationInfo | null> {\n    return fetch(`${authUrl}/api/v1/refresh_token`, {\n        method: \"GET\",\n        credentials: \"include\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n    }).then((res) => {\n        if (res.status === 401) {\n            return null\n        } else if (res.status === 0) {\n            logCorsError()\n            return Promise.reject({\n                status: 503,\n                message: \"Unable to process authentication response\",\n            })\n        } else if (!res.ok) {\n            return Promise.reject({\n                status: res.status,\n                message: res.statusText,\n            })\n        } else {\n            return parseResponse(res)\n        }\n    })\n}\n\nexport function logout(authUrl: string): Promise<LogoutResponse> {\n    return fetch(`${authUrl}/api/v1/logout`, {\n        method: \"POST\",\n        credentials: \"include\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n    }).then((res) => {\n        if (res.status === 0) {\n            logCorsError()\n            return Promise.reject({\n                status: 503,\n                message: \"Unable to process authentication response\",\n            })\n        } else if (!res.ok) {\n            console.error(\"Logout error\", res.status, res.statusText)\n            return Promise.reject({\n                status: res.status,\n                message: res.statusText,\n            })\n        } else {\n            return res.json()\n        }\n    })\n}\n\nfunction parseResponse(res: Response): Promise<AuthenticationInfo> {\n    return res.text().then(\n        (httpResponse) => {\n            try {\n                const authInfoWithoutUserClass = parseJsonConvertingSnakeToCamel(httpResponse)\n                return withExtraArgs(authInfoWithoutUserClass)\n            } catch (e) {\n                console.error(\"Unable to process authentication response\", e)\n                return Promise.reject({\n                    status: 500,\n                    message: \"Unable to process authentication response\",\n                })\n            }\n        },\n        (e) => {\n            console.error(\"Unable to process authentication response\", e)\n            return Promise.reject({\n                status: 500,\n                message: \"Unable to process authentication response\",\n            })\n        }\n    )\n}\n\n// The API responds with snake_case, but TypeScript convention is camelCase.\n// When parsing JSON, we pass in reviver function to convert from snake_case to camelCase.\nexport function parseJsonConvertingSnakeToCamel(str: string): AuthenticationInfo {\n    return JSON.parse(str, function (key, value) {\n        if (key === \"org_id\") {\n            this.orgId = value\n        } else if (key === \"org_name\") {\n            this.orgName = value\n        } else if (key === \"org_metadata\") {\n            this.orgMetadata = value\n        } else if (key === \"url_safe_org_name\") {\n            this.urlSafeOrgName = value\n        } else if (key === \"user_role\") {\n            this.userAssignedRole = value\n        } else if (key === \"inherited_user_roles_plus_current_role\") {\n            this.userInheritedRolesPlusCurrentRole = value\n        } else if (key === \"user_permissions\") {\n            this.userPermissions = value\n        } else if (key === \"access_token\") {\n            this.accessToken = value\n        } else if (key === \"expires_at_seconds\") {\n            this.expiresAtSeconds = value\n        } else if (key === \"org_id_to_org_member_info\") {\n            this.orgIdToOrgMemberInfo = value\n        } else if (key === \"user_id\") {\n            this.userId = value\n        } else if (key === \"email_confirmed\") {\n            this.emailConfirmed = value\n        } else if (key === \"first_name\") {\n            this.firstName = value\n        } else if (key === \"last_name\") {\n            this.lastName = value\n        } else if (key === \"picture_url\") {\n            this.pictureUrl = value\n        } else if (key === \"mfa_enabled\") {\n            this.mfaEnabled = value\n        } else if (key === \"has_password\") {\n            this.hasPassword = value\n        } else if (key === \"can_create_orgs\") {\n            this.canCreateOrgs = value\n        } else if (key === \"created_at\") {\n            this.createdAt = value\n        } else if (key === \"last_active_at\") {\n            this.lastActiveAt = value\n        } else if (key === \"legacy_user_id\") {\n            this.legacyUserId = value\n        } else if (key === \"impersonator_user\") {\n            this.impersonatorUserId = value\n        } else if (key === \"org_role_structure\") {\n            this.orgRoleStructure = value\n        } else if (key === \"additional_roles\") {\n            this.userAssignedAdditionalRoles = value\n        } else {\n            return value\n        }\n    })\n}\n\nfunction withExtraArgs(authInfoWithoutExtraArgs: AuthenticationInfo): Promise<AuthenticationInfo> {\n    if (authInfoWithoutExtraArgs.orgIdToOrgMemberInfo) {\n        authInfoWithoutExtraArgs.orgHelper = getOrgHelper(authInfoWithoutExtraArgs.orgIdToOrgMemberInfo)\n        authInfoWithoutExtraArgs.accessHelper = getAccessHelper(authInfoWithoutExtraArgs.orgIdToOrgMemberInfo)\n    }\n    authInfoWithoutExtraArgs.userClass = new UserClass(\n        {\n            userId: authInfoWithoutExtraArgs.user.userId,\n            email: authInfoWithoutExtraArgs.user.email,\n            createdAt: authInfoWithoutExtraArgs.user.createdAt,\n            firstName: authInfoWithoutExtraArgs.user.firstName,\n            lastName: authInfoWithoutExtraArgs.user.lastName,\n            username: authInfoWithoutExtraArgs.user.username,\n            properties: authInfoWithoutExtraArgs.user.properties,\n            pictureUrl: authInfoWithoutExtraArgs.user.pictureUrl,\n            hasPassword: authInfoWithoutExtraArgs.user.hasPassword,\n            hasMfaEnabled: authInfoWithoutExtraArgs.user.mfaEnabled,\n            canCreateOrgs: authInfoWithoutExtraArgs.user.canCreateOrgs,\n            legacyUserId: authInfoWithoutExtraArgs.user.legacyUserId,\n            impersonatorUserId: authInfoWithoutExtraArgs.impersonatorUserId,\n        },\n        convertOrgIdToOrgMemberInfo(authInfoWithoutExtraArgs.orgIdToOrgMemberInfo)\n    )\n    return Promise.resolve(authInfoWithoutExtraArgs)\n}\n\nfunction logCorsError() {\n    console.error(\n        \"Request to PropelAuth failed due to a CORS error. There are a few likely causes: \\n\" +\n            \" 1. In the Frontend Integration section of your dashboard, make sure your requests are coming either the specified Application URL or localhost with a matching port.\\n\" +\n            \" 2. Make sure your server is hosted on HTTPS in production.\"\n    )\n}\n","import {OrgIdToOrgMemberInfo, OrgMemberInfo} from \"./org\";\n\nexport type OrgHelper = {\n    getOrgs: () => OrgMemberInfo[]\n    getOrgIds: () => string[]\n    getOrg: (orgId: string) => OrgMemberInfo | undefined\n    getOrgByName: (orgName: string) => OrgMemberInfo | undefined\n}\n\nexport function getOrgHelper(\n    orgIdToOrgMemberInfo: OrgIdToOrgMemberInfo,\n): OrgHelper {\n    return {\n        getOrg(orgId: string): OrgMemberInfo | undefined {\n            if (orgIdToOrgMemberInfo.hasOwnProperty(orgId)) {\n                return orgIdToOrgMemberInfo[orgId]\n            } else {\n                return undefined\n            }\n        },\n        getOrgIds(): string[] {\n            return Object.keys(orgIdToOrgMemberInfo)\n        },\n        getOrgs(): OrgMemberInfo[] {\n            return Object.values(orgIdToOrgMemberInfo)\n        },\n        getOrgByName(orgName: string): OrgMemberInfo | undefined {\n            for (const orgMemberInfo of Object.values(orgIdToOrgMemberInfo)) {\n                if (orgMemberInfo.orgName === orgName || orgMemberInfo.urlSafeOrgName === orgName) {\n                    return orgMemberInfo\n                }\n            }\n            return undefined\n        },\n    }\n}","import {OrgIdToOrgMemberInfo, OrgRoleStructure} from \"./org\";\n\nexport type AccessHelper = {\n    isRole: (orgId: string, role: string) => boolean\n    isAtLeastRole: (orgId: string, role: string) => boolean\n    hasPermission: (orgId: string, permission: string) => boolean\n    hasAllPermissions: (orgId: string, permissions: string[]) => boolean\n    getAccessHelperWithOrgId: (orgId: string) => AccessHelperWithOrg\n}\n\nexport type AccessHelperWithOrg = {\n    isRole: (role: string) => boolean\n    isAtLeastRole: (role: string) => boolean\n    hasPermission: (permission: string) => boolean\n    hasAllPermissions: (permissions: string[]) => boolean\n}\n\nexport function getAccessHelper(\n    orgIdToOrgMemberInfo: OrgIdToOrgMemberInfo,\n): AccessHelper {\n    function isRole(orgId: string, role: string): boolean {\n        const orgMemberInfo = orgIdToOrgMemberInfo[orgId]\n        if (orgMemberInfo === undefined) {\n            return false;\n        }\n        if (orgMemberInfo.orgRoleStructure === OrgRoleStructure.MultiRole) {\n            return orgMemberInfo.userAssignedRole === role || orgMemberInfo.userAssignedAdditionalRoles.includes(role)\n        } else {\n            return orgMemberInfo.userAssignedRole === role\n        }\n    }\n    \n    function isAtLeastRole(orgId: string, role: string): boolean {\n        const orgMemberInfo = orgIdToOrgMemberInfo[orgId]\n        if (orgMemberInfo === undefined) {\n            return false;\n        }\n        if (orgMemberInfo.orgRoleStructure === OrgRoleStructure.MultiRole) {\n            return orgMemberInfo.userAssignedRole === role || orgMemberInfo.userAssignedAdditionalRoles.includes(role)\n        } else {\n            return orgMemberInfo.userInheritedRolesPlusCurrentRole.includes(role)\n        }\n    }\n\n    function hasPermission(orgId: string, permission: string): boolean {\n        const orgMemberInfo = orgIdToOrgMemberInfo[orgId]\n        if (orgMemberInfo === undefined) {\n            return false;\n        }\n        return orgMemberInfo.userPermissions.includes(permission)\n    }\n\n    function hasAllPermissions(orgId: string, permissions: string[]): boolean {\n        const orgMemberInfo = orgIdToOrgMemberInfo[orgId]\n        if (orgMemberInfo === undefined) {\n            return false;\n        }\n        return permissions.every(permission => orgMemberInfo.userPermissions.includes(permission))\n    }\n\n    function getAccessHelperWithOrgId(orgId: string): AccessHelperWithOrg {\n        return {\n            isRole(role: string): boolean {\n                return isRole(orgId, role)\n            },\n            isAtLeastRole(role: string): boolean {\n                return isAtLeastRole(orgId, role)\n            },\n            hasPermission(permission: string): boolean {\n                return hasPermission(orgId, permission)\n            },\n            hasAllPermissions(permissions: string[]): boolean {\n                return hasAllPermissions(orgId, permissions)\n            },\n        }\n    }\n    \n    return {\n        isRole,\n        isAtLeastRole,\n        hasPermission,\n        hasAllPermissions,\n        getAccessHelperWithOrgId,\n    }\n}\n","export function currentTimeSeconds() {\n    return Date.now() / 1000\n}\n\nexport function hasLocalStorage(): boolean {\n    return typeof localStorage !== \"undefined\"\n}\n\nexport function hasWindow(): boolean {\n    return typeof window !== \"undefined\"\n}\n\nexport function getLocalStorageNumber(key: string): number | null {\n    if (!hasLocalStorage()) {\n        return null\n    }\n\n    const value = localStorage.getItem(key)\n    if (!value) {\n        return null\n    }\n    const num = parseInt(value, 10)\n    if (Number.isNaN(num)) {\n        return null\n    }\n    return num\n}\n","import { AuthenticationInfo, fetchAuthenticationInfo, logout } from \"./api\"\nimport { currentTimeSeconds, getLocalStorageNumber, hasLocalStorage, hasWindow } from \"./helpers\"\n\nconst LOGGED_IN_AT_KEY = \"__PROPEL_AUTH_LOGGED_IN_AT\"\nconst LOGGED_OUT_AT_KEY = \"__PROPEL_AUTH_LOGGED_OUT_AT\"\nconst AUTH_TOKEN_REFRESH_BEFORE_EXPIRATION_SECONDS = 10 * 60\nconst DEBOUNCE_DURATION_FOR_REFOCUS_SECONDS = 60\n\nconst encodeBase64 = (str: string) => {\n    const encode = window ? window.btoa : btoa\n    return encode(str)\n}\n\nexport interface RedirectToSignupOptions {\n    postSignupRedirectUrl?: string\n    userSignupQueryParameters?: Record<string, string>\n}\n\nexport interface RedirectToLoginOptions {\n    postLoginRedirectUrl?: string\n    userSignupQueryParameters?: Record<string, string>\n}\n\nexport interface RedirectToAccountOptions {\n    redirectBackToUrl?: string\n}\n\nexport interface RedirectToCreateOrgOptions {\n    redirectBackToUrl?: string\n}\n\nexport interface RedirectToOrgPageOptions {\n    redirectBackToUrl?: string\n}\n\nexport interface RedirectToSetupSAMLPageOptions {\n    redirectBackToUrl?: string\n}\n\nexport interface IAuthClient {\n    /**\n     * If the user is logged in, this method returns an access token, the time (in seconds) that the token will expire,\n     * the user's organizations (including org names and user's role within the org), and the user's metadata.\n     * Otherwise, this method returns null.\n     *\n     * The promise will generally resolve immediately, unless our current information is stale in which case it will\n     * make an API request.\n     *\n     * @param forceRefresh If true, this method will always make an API request. Default false\n     */\n    getAuthenticationInfoOrNull(forceRefresh?: boolean): Promise<AuthenticationInfo | null>\n\n    /**\n     * Logs the current user out.\n     * @param redirectAfterLogout If true, will redirect the user to the configured logout URL.\n     */\n    logout(redirectAfterLogout: boolean): Promise<void>\n\n    /**\n     * Gets the URL for the hosted signup page.\n     */\n    getSignupPageUrl(options?: RedirectToSignupOptions): string\n\n    /**\n     * Gets the URL for the hosted login page.\n     */\n    getLoginPageUrl(options?: RedirectToLoginOptions): string\n\n    /**\n     * Gets the URL for the hosted account page.\n     */\n    getAccountPageUrl(options?: RedirectToAccountOptions): string\n\n    /**\n     * Gets the URL for the hosted organization page.\n     * @param orgId The ID of the organization's page to load. If not specified, a random one will be used instead.\n     */\n    getOrgPageUrl(orgId?: string, options?: RedirectToOrgPageOptions): string\n\n    /**\n     * Gets the URL for the hosted create organization page.\n     */\n    getCreateOrgPageUrl(options?: RedirectToCreateOrgOptions): string\n\n    /**\n     * Gets the URL for the hosted SAML configuration page.\n     */\n    getSetupSAMLPageUrl(orgId: string): string\n\n    /**\n     * Redirects the user to the signup page.\n     */\n    redirectToSignupPage(options?: RedirectToSignupOptions): void\n\n    /**\n     * Redirects the user to the login page.\n     */\n    redirectToLoginPage(options?: RedirectToLoginOptions): void\n\n    /**\n     * Redirects the user to the account page.\n     */\n    redirectToAccountPage(options?: RedirectToAccountOptions): void\n\n    /**\n     * Redirects the user to the organization page.\n     * @param orgId The ID of the organization\"s page to load. If not specified, a random one will be used instead.\n     */\n    redirectToOrgPage(orgId?: string, options?: RedirectToOrgPageOptions): void\n\n    /**\n     * Redirects the user to the create organization page.\n     */\n    redirectToCreateOrgPage(options?: RedirectToCreateOrgOptions): void\n\n    /**\n     * Redirects the user to the SAML configuration page.\n     */\n    redirectToSetupSAMLPage(orgId: string, options?: RedirectToSetupSAMLPageOptions): void\n\n    /**\n     * Adds an observer which is called whenever the users logs in or logs out.\n     */\n    addLoggedInChangeObserver(observer: (isLoggedIn: boolean) => void): void\n\n    /**\n     * Removes the observer\n     */\n    removeLoggedInChangeObserver(observer: (isLoggedIn: boolean) => void): void\n\n    /**\n     * Adds an observer which is called whenever the access token changes.\n     */\n    addAccessTokenChangeObserver(observer: (accessToken: string | undefined) => void): void\n\n    /**\n     * Removes the observer\n     */\n    removeAccessTokenChangeObserver(observer: (accessToken: string | undefined) => void): void\n\n    /**\n     * Cleanup the auth client if you no longer need it.\n     */\n    destroy(): void\n}\n\nexport interface IAuthOptions {\n    /**\n     * Base URL where your authentication pages are hosted. See **Frontend Integration** section of your PropelAuth project.\n     */\n    authUrl: string\n\n    /**\n     * If true, periodically refresh the token in the background.\n     * This helps ensure you always have a valid token ready to go when you need it.\n     *\n     * Default true\n     */\n    enableBackgroundTokenRefresh?: boolean\n}\n\ninterface ClientState {\n    initialLoadFinished: boolean\n    authenticationInfo: AuthenticationInfo | null\n    observers: ((isLoggedIn: boolean) => void)[]\n    accessTokenObservers: ((accessToken: string | undefined) => void)[]\n    lastLoggedInAtMessage: number | null\n    lastLoggedOutAtMessage: number | null\n    refreshInterval: number | null\n    lastRefresh: number | null\n    readonly authUrl: string\n}\n\nfunction validateAndCleanupOptions(authOptions: IAuthOptions) {\n    try {\n        // This helps make sure we have a consistent URL ignoring things like trailing slashes\n        const authUrl = new URL(authOptions.authUrl)\n        authOptions.authUrl = authUrl.origin\n    } catch (e) {\n        console.error(\"Invalid authUrl\", e)\n        throw new Error(\"Unable to initialize auth client\")\n    }\n\n    if (authOptions.enableBackgroundTokenRefresh === undefined) {\n        authOptions.enableBackgroundTokenRefresh = true\n    }\n}\n\nexport function createClient(authOptions: IAuthOptions): IAuthClient {\n    validateAndCleanupOptions(authOptions)\n\n    // Internal state\n    const clientState: ClientState = {\n        initialLoadFinished: false,\n        authenticationInfo: null,\n        observers: [],\n        accessTokenObservers: [],\n        lastLoggedInAtMessage: getLocalStorageNumber(LOGGED_IN_AT_KEY),\n        lastLoggedOutAtMessage: getLocalStorageNumber(LOGGED_OUT_AT_KEY),\n        authUrl: authOptions.authUrl,\n        refreshInterval: null,\n        lastRefresh: null,\n    }\n\n    // Helper functions\n    function notifyObservers(isLoggedIn: boolean) {\n        for (let i = 0; i < clientState.observers.length; i++) {\n            const observer = clientState.observers[i]\n            if (observer) {\n                observer(isLoggedIn)\n            }\n        }\n    }\n\n    function notifyObserversOfAccessTokenChange(accessToken: string | undefined) {\n        for (let i = 0; i < clientState.accessTokenObservers.length; i++) {\n            const observer = clientState.accessTokenObservers[i]\n            if (observer) {\n                observer(accessToken)\n            }\n        }\n    }\n\n    function userJustLoggedOut(accessToken: string | undefined, previousAccessToken: string | undefined) {\n        // Edge case: the first time we go to the page, if we can't load the\n        //   auth token we should treat it as a logout event\n        return !accessToken && (previousAccessToken || !clientState.initialLoadFinished)\n    }\n\n    function userJustLoggedIn(accessToken: string | undefined, previousAccessToken: string | undefined) {\n        return !previousAccessToken && accessToken\n    }\n\n    function updateLastLoggedOutAt() {\n        const loggedOutAt = currentTimeSeconds()\n        clientState.lastLoggedOutAtMessage = loggedOutAt\n        if (hasLocalStorage()) {\n            localStorage.setItem(LOGGED_OUT_AT_KEY, String(loggedOutAt))\n        }\n    }\n\n    function updateLastLoggedInAt() {\n        const loggedInAt = currentTimeSeconds()\n        clientState.lastLoggedInAtMessage = loggedInAt\n        if (hasLocalStorage()) {\n            localStorage.setItem(LOGGED_IN_AT_KEY, String(loggedInAt))\n        }\n    }\n\n    function setAuthenticationInfoAndUpdateDownstream(authenticationInfo: AuthenticationInfo | null) {\n        const previousAccessToken = clientState.authenticationInfo?.accessToken\n        clientState.authenticationInfo = authenticationInfo\n        const accessToken = authenticationInfo?.accessToken\n\n        if (userJustLoggedOut(accessToken, previousAccessToken)) {\n            notifyObservers(false)\n            updateLastLoggedOutAt()\n        } else if (userJustLoggedIn(accessToken, previousAccessToken)) {\n            notifyObservers(true)\n            updateLastLoggedInAt()\n        }\n\n        if (previousAccessToken !== accessToken) {\n            notifyObserversOfAccessTokenChange(accessToken)\n        }\n\n        clientState.lastRefresh = currentTimeSeconds()\n        clientState.initialLoadFinished = true\n    }\n\n    async function forceRefreshToken(returnCached: boolean): Promise<AuthenticationInfo | null> {\n        try {\n            // Happy case, we fetch auth info and save it\n            const authenticationInfo = await fetchAuthenticationInfo(clientState.authUrl)\n            setAuthenticationInfoAndUpdateDownstream(authenticationInfo)\n            return authenticationInfo\n        } catch (e) {\n            // If there was an error, we sometimes still want to return the value we have cached\n            //   (e.g. if we were prefetching), so in those cases we swallow the exception\n            if (returnCached) {\n                return clientState.authenticationInfo\n            } else {\n                setAuthenticationInfoAndUpdateDownstream(null)\n                throw e\n            }\n        }\n    }\n\n    const getSignupPageUrl = (options?: RedirectToSignupOptions) => {\n        let qs = new URLSearchParams()\n        let url = `${clientState.authUrl}/signup`\n        if (options) {\n            const { postSignupRedirectUrl, userSignupQueryParameters } = options\n            if (postSignupRedirectUrl) {\n                qs.set(\"rt\", encodeBase64(postSignupRedirectUrl))\n            }\n            if (userSignupQueryParameters) {\n                Object.entries(userSignupQueryParameters).forEach(([key, value]) => {\n                    qs.set(key, value)\n                })\n            }\n        }\n        if (qs.toString()) {\n            url += `?${qs.toString()}`\n        }\n        return url\n    }\n\n    const getLoginPageUrl = (options?: RedirectToLoginOptions) => {\n        let qs = new URLSearchParams()\n        let url = `${clientState.authUrl}/login`\n        if (options) {\n            const { postLoginRedirectUrl, userSignupQueryParameters } = options\n            if (postLoginRedirectUrl) {\n                qs.set(\"rt\", encodeBase64(postLoginRedirectUrl))\n            }\n            if (userSignupQueryParameters) {\n                Object.entries(userSignupQueryParameters).forEach(([key, value]) => {\n                    qs.set(key, value)\n                })\n            }\n        }\n        if (qs.toString()) {\n            url += `?${qs.toString()}`\n        }\n        return url\n    }\n\n    const getAccountPageUrl = (options?: RedirectToAccountOptions) => {\n        let qs = new URLSearchParams()\n        let url = `${clientState.authUrl}/account`\n        if (options) {\n            const { redirectBackToUrl } = options\n            if (redirectBackToUrl) {\n                qs.set(\"rt\", encodeBase64(redirectBackToUrl))\n            }\n        }\n\n        if (qs.toString()) {\n            url += `?${qs.toString()}`\n        }\n        return url\n    }\n\n    const getOrgPageUrl = (orgId?: string, options?: RedirectToOrgPageOptions) => {\n        let qs = new URLSearchParams()\n        let url = `${clientState.authUrl}/org`\n        if (orgId) {\n            qs.set(\"id\", orgId)\n        }\n\n        if (options) {\n            if (options.redirectBackToUrl) {\n                qs.set(\"rt\", encodeBase64(options.redirectBackToUrl))\n            }\n        }\n\n        if (qs.toString()) {\n            url += `?${qs.toString()}`\n        }\n        return url\n    }\n\n    const getCreateOrgPageUrl = (options?: RedirectToCreateOrgOptions) => {\n        let qs = new URLSearchParams()\n        let url = `${clientState.authUrl}/create_org`\n        if (options) {\n            const { redirectBackToUrl } = options\n            if (redirectBackToUrl) {\n                qs.set(\"rt\", encodeBase64(redirectBackToUrl))\n            }\n        }\n        if (qs.toString()) {\n            url += `?${qs.toString()}`\n        }\n        return url\n    }\n\n    const getSetupSAMLPageUrl = (orgId: string, options?: RedirectToSetupSAMLPageOptions) => {\n        let qs = new URLSearchParams()\n        if (options) {\n            if (options.redirectBackToUrl) {\n                qs.set(\"rt\", encodeBase64(options.redirectBackToUrl))\n            }\n        }\n        qs.set(\"id\", orgId)\n\n        return `${clientState.authUrl}/saml?${qs.toString()}`\n    }\n\n    const client = {\n        addLoggedInChangeObserver(loggedInChangeObserver: (isLoggedIn: boolean) => void): void {\n            const hasObserver = clientState.observers.includes(loggedInChangeObserver)\n            if (hasObserver) {\n                console.error(\"Observer has been attached already.\")\n            } else if (!loggedInChangeObserver) {\n                console.error(\"Cannot add a null observer\")\n            } else {\n                clientState.observers.push(loggedInChangeObserver)\n            }\n        },\n\n        removeLoggedInChangeObserver(loggedInChangeObserver: (isLoggedIn: boolean) => void): void {\n            const observerIndex = clientState.observers.indexOf(loggedInChangeObserver)\n            if (observerIndex === -1) {\n                console.error(\"Cannot find observer to remove\")\n            } else {\n                clientState.observers.splice(observerIndex, 1)\n            }\n        },\n\n        addAccessTokenChangeObserver(observer: (accessToken: string | undefined) => void) {\n            const hasObserver = clientState.accessTokenObservers.includes(observer)\n            if (hasObserver) {\n                console.error(\"Observer has been attached already.\")\n            } else if (!observer) {\n                console.error(\"Cannot add a null observer\")\n            } else {\n                clientState.accessTokenObservers.push(observer)\n            }\n        },\n\n        removeAccessTokenChangeObserver(observer: (accessToken: string | undefined) => void) {\n            const observerIndex = clientState.accessTokenObservers.indexOf(observer)\n            if (observerIndex === -1) {\n                console.error(\"Cannot find observer to remove\")\n            } else {\n                clientState.accessTokenObservers.splice(observerIndex, 1)\n            }\n        },\n\n        async getAuthenticationInfoOrNull(forceRefresh?: boolean): Promise<AuthenticationInfo | null> {\n            const currentTimeSecs = currentTimeSeconds()\n            if (forceRefresh) {\n                return await forceRefreshToken(false)\n            } else if (!clientState.authenticationInfo) {\n                return await forceRefreshToken(false)\n            } else if (\n                currentTimeSecs + AUTH_TOKEN_REFRESH_BEFORE_EXPIRATION_SECONDS >\n                clientState.authenticationInfo.expiresAtSeconds\n            ) {\n                // Small edge case: If we were being proactive\n                //   and the auth information hasn't expired yet, swallow any exceptions\n                const returnCached = currentTimeSecs < clientState.authenticationInfo.expiresAtSeconds\n                return await forceRefreshToken(returnCached)\n            } else {\n                return clientState.authenticationInfo\n            }\n        },\n\n        getSignupPageUrl(options?: RedirectToSignupOptions): string {\n            return getSignupPageUrl(options)\n        },\n\n        getLoginPageUrl(options?: RedirectToLoginOptions): string {\n            return getLoginPageUrl(options)\n        },\n\n        getAccountPageUrl(options?: RedirectToAccountOptions): string {\n            return getAccountPageUrl(options)\n        },\n\n        getOrgPageUrl(orgId?: string, options?: RedirectToOrgPageOptions): string {\n            return getOrgPageUrl(orgId, options)\n        },\n\n        getCreateOrgPageUrl(options?: RedirectToCreateOrgOptions): string {\n            return getCreateOrgPageUrl(options)\n        },\n\n        getSetupSAMLPageUrl(orgId: string, options?: RedirectToSetupSAMLPageOptions): string {\n            return getSetupSAMLPageUrl(orgId, options)\n        },\n\n        redirectToSignupPage(options?: RedirectToSignupOptions): void {\n            window.location.href = getSignupPageUrl(options)\n        },\n\n        redirectToLoginPage(options?: RedirectToLoginOptions): void {\n            window.location.href = getLoginPageUrl(options)\n        },\n\n        redirectToAccountPage(options?: RedirectToAccountOptions): void {\n            window.location.href = getAccountPageUrl(options)\n        },\n\n        redirectToOrgPage(orgId?: string, options?: RedirectToOrgPageOptions): void {\n            window.location.href = getOrgPageUrl(orgId, options)\n        },\n\n        redirectToCreateOrgPage(options?: RedirectToCreateOrgOptions): void {\n            window.location.href = getCreateOrgPageUrl(options)\n        },\n\n        redirectToSetupSAMLPage(orgId: string, options?: RedirectToSetupSAMLPageOptions) {\n            window.location.href = getSetupSAMLPageUrl(orgId, options)\n        },\n\n        async logout(redirectAfterLogout: boolean): Promise<void> {\n            const logoutResponse = await logout(clientState.authUrl)\n            setAuthenticationInfoAndUpdateDownstream(null)\n            if (redirectAfterLogout) {\n                window.location.href = logoutResponse.redirect_to\n            }\n        },\n\n        destroy() {\n            clientState.observers = []\n            clientState.accessTokenObservers = []\n            window.removeEventListener(\"storage\", onStorageChange)\n            if (clientState.refreshInterval) {\n                clearInterval(clientState.refreshInterval)\n            }\n        },\n    }\n\n    const onStorageChange = async function () {\n        // If localStorage isn't available, nothing to do here.\n        // This usually happens in frameworks that have some SSR components\n        if (!hasLocalStorage()) {\n            return\n        }\n\n        const loggedOutAt = getLocalStorageNumber(LOGGED_OUT_AT_KEY)\n        const loggedInAt = getLocalStorageNumber(LOGGED_IN_AT_KEY)\n\n        // If we've detected a logout event after the last one our client is aware of, trigger a refresh\n        if (loggedOutAt && (!clientState.lastLoggedOutAtMessage || loggedOutAt > clientState.lastLoggedOutAtMessage)) {\n            clientState.lastLoggedOutAtMessage = loggedOutAt\n            if (clientState.authenticationInfo) {\n                await forceRefreshToken(true)\n            }\n        }\n\n        // If we've detected a login event after the last one our client is aware of, trigger a refresh\n        if (loggedInAt && (!clientState.lastLoggedInAtMessage || loggedInAt > clientState.lastLoggedInAtMessage)) {\n            clientState.lastLoggedInAtMessage = loggedInAt\n            if (!clientState.authenticationInfo) {\n                await forceRefreshToken(true)\n            }\n        }\n    }\n\n    // If we were offline or on a different tab, when we return, refetch auth info\n    // Some browsers trigger focus more often than we'd like, so we'll debounce a little here as well\n    const onOnlineOrFocus = async function () {\n        if (\n            clientState.lastRefresh &&\n            currentTimeSeconds() > clientState.lastRefresh + DEBOUNCE_DURATION_FOR_REFOCUS_SECONDS\n        ) {\n            await forceRefreshToken(true)\n        } else {\n            await client.getAuthenticationInfoOrNull()\n        }\n    }\n\n    if (hasWindow()) {\n        window.addEventListener(\"storage\", onStorageChange)\n        window.addEventListener(\"online\", onOnlineOrFocus)\n        window.addEventListener(\"focus\", onOnlineOrFocus)\n\n        if (authOptions.enableBackgroundTokenRefresh) {\n            client.getAuthenticationInfoOrNull()\n            clientState.refreshInterval = window.setInterval(client.getAuthenticationInfoOrNull, 60000)\n        }\n    }\n\n    return client\n}\n"],"names":["assign","target","i","arguments","length","source","key","api","init","converter","defaultAttributes","set","name","value","attributes","document","expires","Date","now","toUTCString","encodeURIComponent","replace","decodeURIComponent","escape","stringifiedAttributes","attributeName","split","cookie","write","Object","create","get","cookies","jar","parts","slice","join","found","read","e","remove","withAttributes","this","withConverter","freeze","path","ACTIVE_ORG_ID_COOKIE_NAME","OrgRoleStructure","UserClass","constructor","userFields","orgIdToUserOrgInfo","userId","email","firstName","lastName","username","createdAt","pictureUrl","hasPassword","hasMfaEnabled","canCreateOrgs","legacyUserId","impersonatorUserId","properties","getOrg","orgId","getOrgByName","orgName","urlSafeOrgName","toLowerCase","orgMemberInfo","getUserProperty","getOrgs","values","isImpersonating","isRole","role","isAtLeastRole","hasPermission","permission","hasAllPermissions","permissions","fromJSON","json","obj","JSON","parse","OrgMemberInfoClass","stringify","console","error","orgMetadata","userAssignedRole","userInheritedRolesPlusCurrentRole","userPermissions","orgRoleStructure","userAssignedAdditionalRoles","SingleRole","MultiRole","includes","every","fetchAuthenticationInfo","authUrl","fetch","method","credentials","headers","then","res","status","logCorsError","Promise","reject","message","ok","text","httpResponse","authInfoWithoutExtraArgs","orgIdToOrgMemberInfo","orgHelper","hasOwnProperty","getOrgIds","keys","accessHelper","undefined","getAccessHelperWithOrgId","getAccessHelper","userClass","user","mfaEnabled","convertOrgIdToOrgMemberInfo","resolve","withExtraArgs","str","accessToken","expiresAtSeconds","emailConfirmed","lastActiveAt","parseResponse","statusText","currentTimeSeconds","hasLocalStorage","localStorage","getLocalStorageNumber","getItem","num","parseInt","Number","isNaN","LOGGED_IN_AT_KEY","LOGGED_OUT_AT_KEY","encodeBase64","window","btoa","authOptions","URL","origin","Error","enableBackgroundTokenRefresh","validateAndCleanupOptions","clientState","initialLoadFinished","authenticationInfo","observers","accessTokenObservers","lastLoggedInAtMessage","lastLoggedOutAtMessage","refreshInterval","lastRefresh","notifyObservers","isLoggedIn","observer","setAuthenticationInfoAndUpdateDownstream","_clientState$authenti","previousAccessToken","userJustLoggedOut","userJustLoggedIn","loggedInAt","setItem","String","updateLastLoggedInAt","loggedOutAt","updateLastLoggedOutAt","notifyObserversOfAccessTokenChange","async","forceRefreshToken","returnCached","getSignupPageUrl","options","qs","URLSearchParams","url","postSignupRedirectUrl","userSignupQueryParameters","entries","forEach","toString","getLoginPageUrl","postLoginRedirectUrl","getAccountPageUrl","redirectBackToUrl","getOrgPageUrl","getCreateOrgPageUrl","getSetupSAMLPageUrl","client","addLoggedInChangeObserver","loggedInChangeObserver","push","removeLoggedInChangeObserver","observerIndex","indexOf","splice","addAccessTokenChangeObserver","removeAccessTokenChangeObserver","getAuthenticationInfoOrNull","forceRefresh","currentTimeSecs","redirectToSignupPage","location","href","redirectToLoginPage","redirectToAccountPage","redirectToOrgPage","redirectToCreateOrgPage","redirectToSetupSAMLPage","logout","redirectAfterLogout","logoutResponse","redirect_to","destroy","removeEventListener","onStorageChange","clearInterval","onOnlineOrFocus","addEventListener","setInterval","getActiveOrgId","Cookies","sameSite","secure"],"mappings":";6BAEA,SAASA,EAAQC,GACf,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CACzC,IAAIG,EAASF,UAAUD,GACvB,IAAK,IAAII,KAAOD,EACdJ,EAAOK,GAAOD,EAAOC,EAExB,CACD,OAAOL,CACT,CAwHA,IAAIM,EAlGJ,SAASC,EAAMC,EAAWC,GACxB,SAASC,EAAKC,EAAMC,EAAOC,GACzB,GAAwB,oBAAbC,SAAX,CAMkC,iBAFlCD,EAAad,EAAO,CAAA,EAAIU,EAAmBI,IAErBE,UACpBF,EAAWE,QAAU,IAAIC,KAAKA,KAAKC,MAA6B,MAArBJ,EAAWE,UAEpDF,EAAWE,UACbF,EAAWE,QAAUF,EAAWE,QAAQG,eAG1CP,EAAOQ,mBAAmBR,GACvBS,QAAQ,uBAAwBC,oBAChCD,QAAQ,QAASE,QAEpB,IAAIC,EAAwB,GAC5B,IAAK,IAAIC,KAAiBX,EACnBA,EAAWW,KAIhBD,GAAyB,KAAOC,GAEE,IAA9BX,EAAWW,KAWfD,GAAyB,IAAMV,EAAWW,GAAeC,MAAM,KAAK,KAGtE,OAAQX,SAASY,OACff,EAAO,IAAMH,EAAUmB,MAAMf,EAAOD,GAAQY,CAtC7C,CAuCF,CA4BD,OAAOK,OAAOC,OACZ,CACEnB,MACAoB,IA7BJ,SAAcnB,GACZ,GAAwB,oBAAbG,YAA6BZ,UAAUC,QAAWQ,GAA7D,CAQA,IAFA,IAAIoB,EAAUjB,SAASY,OAASZ,SAASY,OAAOD,MAAM,MAAQ,GAC1DO,EAAM,CAAA,EACD/B,EAAI,EAAGA,EAAI8B,EAAQ5B,OAAQF,IAAK,CACvC,IAAIgC,EAAQF,EAAQ9B,GAAGwB,MAAM,KACzBb,EAAQqB,EAAMC,MAAM,GAAGC,KAAK,KAEhC,IACE,IAAIC,EAAQf,mBAAmBY,EAAM,IAGrC,GAFAD,EAAII,GAAS5B,EAAU6B,KAAKzB,EAAOwB,GAE/BzB,IAASyB,EACX,KAEV,CAAQ,MAAOE,GAAK,CACf,CAED,OAAO3B,EAAOqB,EAAIrB,GAAQqB,CApBzB,CAqBF,EAMGO,OAAQ,SAAU5B,EAAME,GACtBH,EACEC,EACA,GACAZ,EAAO,CAAE,EAAEc,EAAY,CACrBE,SAAU,IAGf,EACDyB,eAAgB,SAAU3B,GACxB,OAAON,EAAKkC,KAAKjC,UAAWT,EAAO,CAAA,EAAI0C,KAAK5B,WAAYA,GACzD,EACD6B,cAAe,SAAUlC,GACvB,OAAOD,EAAKR,EAAO,GAAI0C,KAAKjC,UAAWA,GAAYiC,KAAK5B,WACzD,GAEH,CACEA,WAAY,CAAED,MAAOgB,OAAOe,OAAOlC,IACnCD,UAAW,CAAEI,MAAOgB,OAAOe,OAAOnC,KAGxC,CAEUD,CApHa,CACrB8B,KAAM,SAAUzB,GAId,MAHiB,MAAbA,EAAM,KACRA,EAAQA,EAAMsB,MAAM,GAAI,IAEnBtB,EAAMQ,QAAQ,mBAAoBC,mBAC1C,EACDM,MAAO,SAAUf,GACf,OAAOO,mBAAmBP,GAAOQ,QAC/B,2CACAC,mBAEH,GAwG8B,CAAEuB,KAAM,MClIlC,MAAMC,EAA4B,gBCkB7BC,IAAAA,WAAAA,GAAgB,OAAhBA,EAAgB,WAAA,2BAAhBA,EAAgB,UAAA,aAAhBA,CAAgB,EAAA,CAAA,GCErB,MAAMC,EAqBTC,WAAAA,CAAYC,EAAwBC,GAChCT,KAAKU,OAASF,EAAWE,OACzBV,KAAKS,mBAAqBA,EAE1BT,KAAKW,MAAQH,EAAWG,MACxBX,KAAKY,UAAYJ,EAAWI,UAC5BZ,KAAKa,SAAWL,EAAWK,SAC3Bb,KAAKc,SAAWN,EAAWM,SAC3Bd,KAAKe,UAAYP,EAAWO,UAC5Bf,KAAKgB,WAAaR,EAAWQ,WAC7BhB,KAAKiB,YAAcT,EAAWS,YAC9BjB,KAAKkB,cAAgBV,EAAWU,cAChClB,KAAKmB,cAAgBX,EAAWW,cAEhCnB,KAAKoB,aAAeZ,EAAWY,aAC/BpB,KAAKqB,mBAAqBb,EAAWa,mBACrCrB,KAAKsB,WAAad,EAAWc,UACjC,CAEOC,MAAAA,CAAOC,GACV,GAAKxB,KAAKS,mBAIV,OAAOT,KAAKS,mBAAmBe,EACnC,CAEOC,YAAAA,CAAaC,GAChB,IAAK1B,KAAKS,mBACN,OAGJ,MAAMkB,EAAiBD,EAAQE,cAAcjD,QAAQ,KAAM,KAC3D,IAAK,MAAM6C,KAASxB,KAAKS,mBAAoB,CACzC,MAAMoB,EAAgB7B,KAAKS,mBAAmBe,GAC9C,IAAIK,aAAa,EAAbA,EAAeF,kBAAmBA,EAClC,OAAOE,CAEf,CAGJ,CAEOC,eAAAA,CAAgBlE,GACnB,GAAKoC,KAAKsB,WAIV,OAAOtB,KAAKsB,WAAW1D,EAC3B,CAEOmE,OAAAA,GACH,OAAK/B,KAAKS,mBAIHtB,OAAO6C,OAAOhC,KAAKS,oBAHf,EAIf,CAEOwB,eAAAA,GACH,QAASjC,KAAKqB,kBAClB,CAEOa,MAAAA,CAAOV,EAAeW,GACzB,MAAMN,EAAgB7B,KAAKuB,OAAOC,GAClC,QAAKK,GAIEA,EAAcK,OAAOC,EAChC,CAEOC,aAAAA,CAAcZ,EAAeW,GAChC,MAAMN,EAAgB7B,KAAKuB,OAAOC,GAClC,QAAKK,GAIEA,EAAcO,cAAcD,EACvC,CAEOE,aAAAA,CAAcb,EAAec,GAChC,MAAMT,EAAgB7B,KAAKuB,OAAOC,GAClC,QAAKK,GAIEA,EAAcQ,cAAcC,EACvC,CAEOC,iBAAAA,CAAkBf,EAAegB,GACpC,MAAMX,EAAgB7B,KAAKuB,OAAOC,GAClC,QAAKK,GAIEA,EAAcU,kBAAkBC,EAC3C,CAEA,eAAcC,CAASC,GACnB,MAAMC,EAAMC,KAAKC,MAAMH,GACjBjC,EAAgD,CAAA,EACtD,IAAK,MAAMe,KAASmB,EAAIlC,mBACpBA,EAAmBe,GAASsB,EAAmBL,SAASG,KAAKG,UAAUJ,EAAIlC,mBAAmBe,KAElG,IACI,OAAO,IAAIlB,EACP,CACII,OAAQiC,EAAIjC,OACZC,MAAOgC,EAAIhC,MACXI,UAAW4B,EAAI5B,UACfH,UAAW+B,EAAI/B,UACfC,SAAU8B,EAAI9B,SACdC,SAAU6B,EAAI7B,SACdM,aAAcuB,EAAIvB,aAClBC,mBAAoBsB,EAAItB,mBACxBC,WAAYqB,EAAIrB,WAChBN,WAAY2B,EAAI3B,WAChBC,YAAa0B,EAAI1B,YACjBC,cAAeyB,EAAIzB,cACnBC,cAAewB,EAAIxB,eAEvBV,EAEP,CAAC,MAAOZ,GAEL,MADAmD,QAAQC,MAAM,qFAAsFpD,GAC9FA,CACV,CACJ,EAOG,MAAMiD,EAYTvC,WAAAA,CACIiB,EACAE,EACAwB,EACAvB,EACAwB,EACAC,EACAC,EACAC,EACAC,GAEAvD,KAAKwB,MAAQA,EACbxB,KAAK0B,QAAUA,EACf1B,KAAKkD,YAAcA,EACnBlD,KAAK2B,eAAiBA,EACtB3B,KAAKsD,iBAAmBA,QAAAA,EAAoBjD,EAAiBmD,WAE7DxD,KAAKmD,iBAAmBA,EACxBnD,KAAKoD,kCAAoCA,EACzCpD,KAAKqD,gBAAkBA,EACvBrD,KAAKuD,4BAA8BA,QAAAA,EAA+B,EACtE,CAGOrB,MAAAA,CAAOC,GACV,OAAInC,KAAKsD,mBAAqBjD,EAAiBoD,UACpCzD,KAAKmD,mBAAqBhB,GAAQnC,KAAKuD,4BAA4BG,SAASvB,GAE5EnC,KAAKmD,mBAAqBhB,CAEzC,CAEOC,aAAAA,CAAcD,GACjB,OAAInC,KAAKsD,mBAAqBjD,EAAiBoD,UACpCzD,KAAKmD,mBAAqBhB,GAAQnC,KAAKuD,4BAA4BG,SAASvB,GAE5EnC,KAAKoD,kCAAkCM,SAASvB,EAE/D,CAEOE,aAAAA,CAAcC,GACjB,OAAOtC,KAAKqD,gBAAgBK,SAASpB,EACzC,CAEOC,iBAAAA,CAAkBC,GACrB,OAAOA,EAAYmB,OAAOrB,GAAetC,KAAKqC,cAAcC,IAChE,CAEA,eAAcG,CAASC,GACnB,MAAMC,EAAMC,KAAKC,MAAMH,GACvB,IACI,OAAO,IAAII,EACPH,EAAInB,MACJmB,EAAIjB,QACJiB,EAAIO,YACJP,EAAIhB,eACJgB,EAAIQ,iBACJR,EAAIS,kCACJT,EAAIU,gBACJV,EAAIW,iBACJX,EAAIY,4BAEX,CAAC,MAAO1D,GAKL,MAJAmD,QAAQC,MACJ,8FACApD,GAEEA,CACV,CACJ,EC5MG,SAAS+D,EAAwBC,GACpC,OAAOC,MAAO,GAAED,yBAAgC,CAC5CE,OAAQ,MACRC,YAAa,UACbC,QAAS,CACL,eAAgB,sBAErBC,MAAMC,GACc,MAAfA,EAAIC,OACG,KACe,IAAfD,EAAIC,QACXC,IACOC,QAAQC,OAAO,CAClBH,OAAQ,IACRI,QAAS,+CAELL,EAAIM,GAqCxB,SAAuBN,GACnB,OAAOA,EAAIO,OAAOR,MACbS,IACG,IAEI,OA6EhB,SAAuBC,GACfA,EAAyBC,uBACzBD,EAAyBE,WCpL7BD,EDoLsDD,EAAyBC,qBClLxE,CACHtD,OAAOC,GACCqD,EAAqBE,eAAevD,GAC7BqD,EAAqBrD,QAE5B,EAGRwD,UAASA,IACE7F,OAAO8F,KAAKJ,GAEvB9C,QAAOA,IACI5C,OAAO6C,OAAO6C,GAEzBpD,YAAAA,CAAaC,GACT,IAAK,MAAMG,KAAiB1C,OAAO6C,OAAO6C,GACtC,GAAIhD,EAAcH,UAAYA,GAAWG,EAAcF,iBAAmBD,EACtE,OAAOG,CAInB,ID8JA+C,EAAyBM,aE9K1B,SACHL,GAEA,SAAS3C,EAAOV,EAAeW,GAC3B,MAAMN,EAAgBgD,EAAqBrD,GAC3C,YAAsB2D,IAAlBtD,IAGAA,EAAcyB,mBAAqBjD,EAAiBoD,UAC7C5B,EAAcsB,mBAAqBhB,GAAQN,EAAc0B,4BAA4BG,SAASvB,GAE9FN,EAAcsB,mBAAqBhB,EAElD,CAEA,SAASC,EAAcZ,EAAeW,GAClC,MAAMN,EAAgBgD,EAAqBrD,GAC3C,YAAsB2D,IAAlBtD,IAGAA,EAAcyB,mBAAqBjD,EAAiBoD,UAC7C5B,EAAcsB,mBAAqBhB,GAAQN,EAAc0B,4BAA4BG,SAASvB,GAE9FN,EAAcuB,kCAAkCM,SAASvB,GAExE,CAEA,SAASE,EAAcb,EAAec,GAClC,MAAMT,EAAgBgD,EAAqBrD,GAC3C,YAAsB2D,IAAlBtD,GAGGA,EAAcwB,gBAAgBK,SAASpB,EAClD,CAEA,SAASC,EAAkBf,EAAegB,GACtC,MAAMX,EAAgBgD,EAAqBrD,GAC3C,YAAsB2D,IAAlBtD,GAGGW,EAAYmB,OAAMrB,GAAcT,EAAcwB,gBAAgBK,SAASpB,IAClF,CAmBA,MAAO,CACHJ,SACAE,gBACAC,gBACAE,oBACA6C,yBAtBJ,SAAkC5D,GAC9B,MAAO,CACHU,OAAOC,GACID,EAAOV,EAAOW,GAEzBC,cAAcD,GACHC,EAAcZ,EAAOW,GAEhCE,cAAcC,GACHD,EAAcb,EAAOc,GAEhCC,kBAAkBC,GACPD,EAAkBf,EAAOgB,GAG5C,EASJ,CF2GgD6C,CAAgBT,EAAyBC,uBCtLlF,IACHA,EDyMA,OAlBAD,EAAyBU,UAAY,IAAIhF,EACrC,CACII,OAAQkE,EAAyBW,KAAK7E,OACtCC,MAAOiE,EAAyBW,KAAK5E,MACrCI,UAAW6D,EAAyBW,KAAKxE,UACzCH,UAAWgE,EAAyBW,KAAK3E,UACzCC,SAAU+D,EAAyBW,KAAK1E,SACxCC,SAAU8D,EAAyBW,KAAKzE,SACxCQ,WAAYsD,EAAyBW,KAAKjE,WAC1CN,WAAY4D,EAAyBW,KAAKvE,WAC1CC,YAAa2D,EAAyBW,KAAKtE,YAC3CC,cAAe0D,EAAyBW,KAAKC,WAC7CrE,cAAeyD,EAAyBW,KAAKpE,cAC7CC,aAAcwD,EAAyBW,KAAKnE,aAC5CC,mBAAoBuD,EAAyBvD,oBDqDlD,SACHwD,GAEA,QAA6BM,IAAzBN,EACA,OAEJ,MAAMpE,EAAgD,CAAA,EACtD,IAAK,MAAMoB,KAAiB1C,OAAO6C,OAAO6C,GACtCpE,EAAmBoB,EAAcL,OAAS,IAAIsB,EAC1CjB,EAAcL,MACdK,EAAcH,QACdG,EAAcqB,YACdrB,EAAcF,eACdE,EAAcsB,iBACdtB,EAAcuB,kCACdvB,EAAcwB,gBACdxB,EAAcyB,iBACdzB,EAAc0B,6BAGtB,OAAO9C,CACX,CCxEQgF,CAA4Bb,EAAyBC,uBAElDP,QAAQoB,QAAQd,EAC3B,CArGuBe,EAqByBC,EAtBiCjB,EAuBtE/B,KAAKC,MAAM+C,GAAK,SAAUhI,EAAKO,GAClC,GAAY,WAARP,EACAoC,KAAKwB,MAAQrD,OACV,GAAY,aAARP,EACPoC,KAAK0B,QAAUvD,OACZ,GAAY,iBAARP,EACPoC,KAAKkD,YAAc/E,OAChB,GAAY,sBAARP,EACPoC,KAAK2B,eAAiBxD,OACnB,GAAY,cAARP,EACPoC,KAAKmD,iBAAmBhF,OACrB,GAAY,2CAARP,EACPoC,KAAKoD,kCAAoCjF,OACtC,GAAY,qBAARP,EACPoC,KAAKqD,gBAAkBlF,OACpB,GAAY,iBAARP,EACPoC,KAAK6F,YAAc1H,OAChB,GAAY,uBAARP,EACPoC,KAAK8F,iBAAmB3H,OACrB,GAAY,8BAARP,EACPoC,KAAK6E,qBAAuB1G,OACzB,GAAY,YAARP,EACPoC,KAAKU,OAASvC,OACX,GAAY,oBAARP,EACPoC,KAAK+F,eAAiB5H,OACnB,GAAY,eAARP,EACPoC,KAAKY,UAAYzC,OACd,GAAY,cAARP,EACPoC,KAAKa,SAAW1C,OACb,GAAY,gBAARP,EACPoC,KAAKgB,WAAa7C,OACf,GAAY,gBAARP,EACPoC,KAAKwF,WAAarH,OACf,GAAY,iBAARP,EACPoC,KAAKiB,YAAc9C,OAChB,GAAY,oBAARP,EACPoC,KAAKmB,cAAgBhD,OAClB,GAAY,eAARP,EACPoC,KAAKe,UAAY5C,OACd,GAAY,mBAARP,EACPoC,KAAKgG,aAAe7H,OACjB,GAAY,mBAARP,EACPoC,KAAKoB,aAAejD,OACjB,GAAY,sBAARP,EACPoC,KAAKqB,mBAAqBlD,OACvB,GAAY,uBAARP,EACPoC,KAAKsD,iBAAmBnF,MACrB,IAAY,qBAARP,EAGP,OAAOO,EAFP6B,KAAKuD,4BAA8BpF,CAGvC,CACJ,KAzES,CAAC,MAAO0B,GAEL,OADAmD,QAAQC,MAAM,4CAA6CpD,GACpDyE,QAAQC,OAAO,CAClBH,OAAQ,IACRI,QAAS,6CAEjB,CAcL,IAAyCoB,CAdpC,IAEH/F,IACGmD,QAAQC,MAAM,4CAA6CpD,GACpDyE,QAAQC,OAAO,CAClBH,OAAQ,IACRI,QAAS,gDAIzB,CArDmByB,CAAc9B,GALdG,QAAQC,OAAO,CAClBH,OAAQD,EAAIC,OACZI,QAASL,EAAI+B,cAM7B,CAwIA,SAAS7B,IACLrB,QAAQC,MACJ,wTAIR,CG5NO,SAASkD,IACZ,OAAO5H,KAAKC,MAAQ,GACxB,CAEO,SAAS4H,IACZ,MAA+B,oBAAjBC,YAClB,CAMO,SAASC,EAAsB1I,GAClC,IAAKwI,IACD,OAAO,KAGX,MAAMjI,EAAQkI,aAAaE,QAAQ3I,GACnC,IAAKO,EACD,OAAO,KAEX,MAAMqI,EAAMC,SAAStI,EAAO,IAC5B,OAAIuI,OAAOC,MAAMH,GACN,KAEJA,CACX,CCvBA,MAAMI,EAAmB,6BACnBC,EAAoB,8BAIpBC,EAAgBlB,IACHmB,OAASA,OAAOC,KAAOA,MACxBpB,qFAkLX,SAAsBqB,IAf7B,SAAmCA,GAC/B,IAEI,MAAMpD,EAAU,IAAIqD,IAAID,EAAYpD,SACpCoD,EAAYpD,QAAUA,EAAQsD,MACjC,CAAC,MAAOtH,GAEL,MADAmD,QAAQC,MAAM,kBAAmBpD,GAC3B,IAAIuH,MAAM,mCACpB,MAEiDjC,IAA7C8B,EAAYI,+BACZJ,EAAYI,8BAA+B,EAEnD,CAGIC,CAA0BL,GAG1B,MAAMM,EAA2B,CAC7BC,qBAAqB,EACrBC,mBAAoB,KACpBC,UAAW,GACXC,qBAAsB,GACtBC,sBAAuBtB,EAAsBM,GAC7CiB,uBAAwBvB,EAAsBO,GAC9ChD,QAASoD,EAAYpD,QACrBiE,gBAAiB,KACjBC,YAAa,MAIjB,SAASC,EAAgBC,GACrB,IAAK,IAAIzK,EAAI,EAAGA,EAAI+J,EAAYG,UAAUhK,OAAQF,IAAK,CACnD,MAAM0K,EAAWX,EAAYG,UAAUlK,GACnC0K,GACAA,EAASD,EAEjB,CACJ,CAqCA,SAASE,EAAyCV,GAA+C,IAAAW,EAC7F,MAAMC,EAAoD,QAAjCD,EAAGb,EAAYE,0BAAkB,IAAAW,OAAA,EAA9BA,EAAgCvC,YAC5D0B,EAAYE,mBAAqBA,EACjC,MAAM5B,EAAc4B,aAAAA,EAAAA,EAAoB5B,aA7B5C,SAA2BA,EAAiCwC,GAGxD,OAAQxC,IAAgBwC,IAAwBd,EAAYC,oBAChE,CA2BQc,CAAkBzC,EAAawC,GAzBvC,SAA0BxC,EAAiCwC,GACvD,OAAQA,GAAuBxC,CACnC,CA0Be0C,CAAiB1C,EAAawC,KACrCL,GAAgB,GAjBxB,WACI,MAAMQ,EAAarC,IACnBoB,EAAYK,sBAAwBY,EAChCpC,KACAC,aAAaoC,QAAQ7B,EAAkB8B,OAAOF,GAEtD,CAYQG,KAJAX,GAAgB,GAtBxB,WACI,MAAMY,EAAczC,IACpBoB,EAAYM,uBAAyBe,EACjCxC,KACAC,aAAaoC,QAAQ5B,EAAmB6B,OAAOE,GAEvD,CAiBQC,IAMAR,IAAwBxC,GAhDhC,SAA4CA,GACxC,IAAK,IAAIrI,EAAI,EAAGA,EAAI+J,EAAYI,qBAAqBjK,OAAQF,IAAK,CAC9D,MAAM0K,EAAWX,EAAYI,qBAAqBnK,GAC9C0K,GACAA,EAASrC,EAEjB,CACJ,CA0CQiD,CAAmCjD,GAGvC0B,EAAYQ,YAAc5B,IAC1BoB,EAAYC,qBAAsB,CACtC,CAEAuB,eAAeC,EAAkBC,GAC7B,IAEI,MAAMxB,QAA2B7D,EAAwB2D,EAAY1D,SAErE,OADAsE,EAAyCV,GAClCA,CACV,CAAC,MAAO5H,GAGL,GAAIoJ,EACA,OAAO1B,EAAYE,mBAGnB,MADAU,EAAyC,MACnCtI,CAEd,CACJ,CAEA,MAAMqJ,EAAoBC,IACtB,IAAIC,EAAK,IAAIC,gBACTC,EAAO,GAAE/B,EAAY1D,iBACzB,GAAIsF,EAAS,CACT,MAAMI,sBAAEA,EAAqBC,0BAAEA,GAA8BL,EACzDI,GACAH,EAAGnL,IAAI,KAAM6I,EAAayC,IAE1BC,GACArK,OAAOsK,QAAQD,GAA2BE,SAAQ,EAAE9L,EAAKO,MACrDiL,EAAGnL,IAAIL,EAAKO,EAAM,GAG9B,CAIA,OAHIiL,EAAGO,aACHL,GAAQ,IAAGF,EAAGO,cAEXL,CAAG,EAGRM,EAAmBT,IACrB,IAAIC,EAAK,IAAIC,gBACTC,EAAO,GAAE/B,EAAY1D,gBACzB,GAAIsF,EAAS,CACT,MAAMU,qBAAEA,EAAoBL,0BAAEA,GAA8BL,EACxDU,GACAT,EAAGnL,IAAI,KAAM6I,EAAa+C,IAE1BL,GACArK,OAAOsK,QAAQD,GAA2BE,SAAQ,EAAE9L,EAAKO,MACrDiL,EAAGnL,IAAIL,EAAKO,EAAM,GAG9B,CAIA,OAHIiL,EAAGO,aACHL,GAAQ,IAAGF,EAAGO,cAEXL,CAAG,EAGRQ,EAAqBX,IACvB,IAAIC,EAAK,IAAIC,gBACTC,EAAO,GAAE/B,EAAY1D,kBACzB,GAAIsF,EAAS,CACT,MAAMY,kBAAEA,GAAsBZ,EAC1BY,GACAX,EAAGnL,IAAI,KAAM6I,EAAaiD,GAElC,CAKA,OAHIX,EAAGO,aACHL,GAAQ,IAAGF,EAAGO,cAEXL,CAAG,EAGRU,EAAgBA,CAACxI,EAAgB2H,KACnC,IAAIC,EAAK,IAAIC,gBACTC,EAAO,GAAE/B,EAAY1D,cAczB,OAbIrC,GACA4H,EAAGnL,IAAI,KAAMuD,GAGb2H,GACIA,EAAQY,mBACRX,EAAGnL,IAAI,KAAM6I,EAAaqC,EAAQY,oBAItCX,EAAGO,aACHL,GAAQ,IAAGF,EAAGO,cAEXL,CAAG,EAGRW,EAAuBd,IACzB,IAAIC,EAAK,IAAIC,gBACTC,EAAO,GAAE/B,EAAY1D,qBACzB,GAAIsF,EAAS,CACT,MAAMY,kBAAEA,GAAsBZ,EAC1BY,GACAX,EAAGnL,IAAI,KAAM6I,EAAaiD,GAElC,CAIA,OAHIX,EAAGO,aACHL,GAAQ,IAAGF,EAAGO,cAEXL,CAAG,EAGRY,EAAsBA,CAAC1I,EAAe2H,KACxC,IAAIC,EAAK,IAAIC,gBAQb,OAPIF,GACIA,EAAQY,mBACRX,EAAGnL,IAAI,KAAM6I,EAAaqC,EAAQY,oBAG1CX,EAAGnL,IAAI,KAAMuD,GAEL,GAAE+F,EAAY1D,gBAAgBuF,EAAGO,YAAY,EAGnDQ,EAAS,CACXC,yBAAAA,CAA0BC,GACF9C,EAAYG,UAAUhE,SAAS2G,GAE/CrH,QAAQC,MAAM,uCACNoH,EAGR9C,EAAYG,UAAU4C,KAAKD,GAF3BrH,QAAQC,MAAM,6BAIrB,EAEDsH,4BAAAA,CAA6BF,GACzB,MAAMG,EAAgBjD,EAAYG,UAAU+C,QAAQJ,IAC7B,IAAnBG,EACAxH,QAAQC,MAAM,kCAEdsE,EAAYG,UAAUgD,OAAOF,EAAe,EAEnD,EAEDG,4BAAAA,CAA6BzC,GACLX,EAAYI,qBAAqBjE,SAASwE,GAE1DlF,QAAQC,MAAM,uCACNiF,EAGRX,EAAYI,qBAAqB2C,KAAKpC,GAFtClF,QAAQC,MAAM,6BAIrB,EAED2H,+BAAAA,CAAgC1C,GAC5B,MAAMsC,EAAgBjD,EAAYI,qBAAqB8C,QAAQvC,IACxC,IAAnBsC,EACAxH,QAAQC,MAAM,kCAEdsE,EAAYI,qBAAqB+C,OAAOF,EAAe,EAE9D,EAED,iCAAMK,CAA4BC,GAC9B,MAAMC,EAAkB5E,IACxB,GAAI2E,EACA,aAAa9B,GAAkB,GAC5B,GAAKzB,EAAYE,mBAEjB,IACHsD,EAjbqC,IAkbrCxD,EAAYE,mBAAmB3B,iBACjC,CAGE,MAAMmD,EAAe8B,EAAkBxD,EAAYE,mBAAmB3B,iBACtE,aAAakD,EAAkBC,EACnC,CACI,OAAO1B,EAAYE,kBACvB,CAXI,aAAauB,GAAkB,EAYtC,EAEDE,iBAAiBC,GACND,EAAiBC,GAG5BS,gBAAgBT,GACLS,EAAgBT,GAG3BW,kBAAkBX,GACPW,EAAkBX,GAG7Ba,cAAaA,CAACxI,EAAgB2H,IACnBa,EAAcxI,EAAO2H,GAGhCc,oBAAoBd,GACTc,EAAoBd,GAG/Be,oBAAmBA,CAAC1I,EAAe2H,IACxBe,EAAoB1I,EAAO2H,GAGtC6B,oBAAAA,CAAqB7B,GACjBpC,OAAOkE,SAASC,KAAOhC,EAAiBC,EAC3C,EAEDgC,mBAAAA,CAAoBhC,GAChBpC,OAAOkE,SAASC,KAAOtB,EAAgBT,EAC1C,EAEDiC,qBAAAA,CAAsBjC,GAClBpC,OAAOkE,SAASC,KAAOpB,EAAkBX,EAC5C,EAEDkC,iBAAAA,CAAkB7J,EAAgB2H,GAC9BpC,OAAOkE,SAASC,KAAOlB,EAAcxI,EAAO2H,EAC/C,EAEDmC,uBAAAA,CAAwBnC,GACpBpC,OAAOkE,SAASC,KAAOjB,EAAoBd,EAC9C,EAEDoC,uBAAAA,CAAwB/J,EAAe2H,GACnCpC,OAAOkE,SAASC,KAAOhB,EAAoB1I,EAAO2H,EACrD,EAED,YAAMqC,CAAOC,GACT,MAAMC,QJnaK7H,EImayB0D,EAAY1D,QJlajDC,MAAO,GAAED,kBAAyB,CACrCE,OAAQ,OACRC,YAAa,UACbC,QAAS,CACL,eAAgB,sBAErBC,MAAMC,GACc,IAAfA,EAAIC,QACJC,IACOC,QAAQC,OAAO,CAClBH,OAAQ,IACRI,QAAS,+CAELL,EAAIM,GAOLN,EAAIzB,QANXM,QAAQC,MAAM,eAAgBkB,EAAIC,OAAQD,EAAI+B,YACvC5B,QAAQC,OAAO,CAClBH,OAAQD,EAAIC,OACZI,QAASL,EAAI+B,iBAlBtB,IAAgBrC,EIoaXsE,EAAyC,MACrCsD,IACA1E,OAAOkE,SAASC,KAAOQ,EAAeC,YAE7C,EAEDC,OAAAA,GACIrE,EAAYG,UAAY,GACxBH,EAAYI,qBAAuB,GACnCZ,OAAO8E,oBAAoB,UAAWC,GAClCvE,EAAYO,iBACZiE,cAAcxE,EAAYO,gBAElC,GAGEgE,EAAkB/C,iBAGpB,IAAK3C,IACD,OAGJ,MAAMwC,EAActC,EAAsBO,GACpC2B,EAAalC,EAAsBM,GAGrCgC,KAAiBrB,EAAYM,wBAA0Be,EAAcrB,EAAYM,0BACjFN,EAAYM,uBAAyBe,EACjCrB,EAAYE,0BACNuB,GAAkB,IAK5BR,KAAgBjB,EAAYK,uBAAyBY,EAAajB,EAAYK,yBAC9EL,EAAYK,sBAAwBY,EAC/BjB,EAAYE,0BACPuB,GAAkB,KAO9BgD,EAAkBjD,iBAEhBxB,EAAYQ,aACZ5B,IAAuBoB,EAAYQ,YA9hBD,SAgiB5BiB,GAAkB,SAElBmB,EAAOU,+BAerB,MD9iByB,oBAAX9D,SCoiBVA,OAAOkF,iBAAiB,UAAWH,GACnC/E,OAAOkF,iBAAiB,SAAUD,GAClCjF,OAAOkF,iBAAiB,QAASD,GAE7B/E,EAAYI,+BACZ8C,EAAOU,8BACPtD,EAAYO,gBAAkBf,OAAOmF,YAAY/B,EAAOU,4BAA6B,OAItFV,CACX,mBN1hB8BgC,IACnBC,EAAQ/M,IAAIe,oBARQoB,IAC3B4K,EAAQnO,IAAImC,EAA2BoB,EAAO,CAC1C6K,SAAU,MACVC,QAAQ,GACV"}